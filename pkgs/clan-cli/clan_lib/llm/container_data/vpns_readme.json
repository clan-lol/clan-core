{
  "wireguard": "# Wireguard VPN Service\n\nThis service provides a Wireguard-based VPN mesh network with automatic IPv6 address allocation and routing between clan machines.\n\n## Overview\n\nThe wireguard service creates a secure mesh network between clan machines using two roles:\n- **Controllers**: Machines with public endpoints that act as connection points and routers\n- **Peers**: Machines that connect through controllers to access the network\n\n## Requirements\n\n- Controllers must have a publicly accessible endpoint (domain name or static IP)\n- Peers must be in networks where UDP traffic is not blocked (uses port 51820 by default, configurable)\n\n## Features\n\n- Automatic IPv6 address allocation using ULA (Unique Local Address) prefixes\n- Full mesh connectivity between all machines\n- Automatic key generation and distribution\n- IPv6 forwarding on controllers for inter-peer communication\n- Support for multiple controllers for redundancy\n\n## Network Architecture\n\n### IPv6 Address Allocation\n- Base network: `/40` ULA prefix (deterministically generated from instance name)\n- Controllers: Each gets a `/56` subnet from the base `/40`\n- Peers: Each gets a unique 64-bit host suffix that is used in ALL controller subnets\n\n### Addressing Design\n- Each peer generates a unique host suffix (e.g., `:8750:a09b:0:1`)\n- This suffix is appended to each controller's `/56` prefix to create unique addresses\n- Example: peer1 with suffix `:8750:a09b:0:1` gets:\n  - `fd51:19c1:3b:f700:8750:a09b:0:1` in controller1's subnet\n  - `fd51:19c1:c1:aa00:8750:a09b:0:1` in controller2's subnet\n- Controllers allow each peer's `/96` subnet for routing flexibility\n\n### Connectivity\n- Peers use a single WireGuard interface with multiple IPs (one per controller subnet)\n- Controllers connect to ALL other controllers and ALL peers on a single interface\n- Controllers have IPv6 forwarding enabled to route traffic between peers\n- All traffic between peers flows through controllers\n- Symmetric routing is maintained as each peer has consistent IPs across all controllers\n\n### Example Network Topology\n\n```mermaid\ngraph TB\n    subgraph Controllers\n        C1[controller1<br/>endpoint: vpn1.example.com<br/>fd51:19c1:3b:f700::/56]\n        C2[controller2<br/>endpoint: vpn2.example.com<br/>fd51:19c1:c1:aa00::/56]\n    end\n    \n    subgraph Peers\n        P1[peer1<br/>designated: controller1]\n        P2[peer2<br/>designated: controller2]\n        P3[peer3<br/>designated: controller1]\n    end\n    \n    %% Controllers connect to each other\n    C1 <--> C2\n    \n    %% All peers connect to all controllers\n    P1 <--> C1\n    P1 <--> C2\n    P2 <--> C1\n    P2 <--> C2\n    P3 <--> C1\n    P3 <--> C2\n    \n    %% Peer-to-peer traffic flows through controllers\n    P1 -.->|via controllers| P3\n    P1 -.->|via controllers| P2\n    P2 -.->|via controllers| P3\n    \n    classDef controller fill:#f9f,stroke:#333,stroke-width:4px\n    classDef peer fill:#bbf,stroke:#333,stroke-width:2px\n    class C1,C2 controller\n    class P1,P2,P3 peer\n```\n\n## Configuration\n\n### Basic Setup with Single Controller\n\n```nix\n# In your clan.nix\n{\n  instances = {\n    wireguard = {\n      module.name = \"wireguard\";\n      module.input = \"clan-core\";\n      roles.controller = {\n        machines.server1 = {};\n        settings = {\n          # Public endpoint where this controller can be reached\n          endpoint = \"vpn.example.com\";\n          # Optional: Change the UDP port (default: 51820)\n          port = 51820;\n        };\n      };\n      roles.peer = {\n        # No configuration needed if only one controller exists\n        machines.laptop1 = {};\n      };\n    };\n  }\n}\n```\n\n### Multiple Controllers Setup\n\n```nix\n{\n  instances = {\n    wireguard = {\n      module.name = \"wireguard\";\n      module.input = \"clan-core\";\n      roles.controller.machines = {\n        server1.settings.endpoint = \"vpn1.example.com\";\n        server2.settings.endpoint = \"vpn2.example.com\";\n        server3.settings.endpoint = \"vpn3.example.com\";\n      };\n      roles.peer.machines.laptop1 = {\n        # Must specify which controller subnet is exposed as the default in /etc/hosts, when multiple controllers exist\n        settings.controller = \"server1\";\n      };\n    };\n  }\n}\n```\n\n### Advanced Options\n\n\n### Automatic Hostname Resolution\n\nThe wireguard service automatically adds entries to `/etc/hosts` for all machines in the network. Each machine is accessible via its hostname in the format `<machine-name>.<instance-name>`.\n\nFor example, with an instance named `vpn`:\n- `server1.vpn` - resolves to server1's IPv6 address\n- `laptop1.vpn` - resolves to laptop1's IPv6 address\n\nThis allows machines to communicate using hostnames instead of IPv6 addresses:\n\n```bash\n# Ping another machine by hostname\nping6 server1.vpn\n\n# SSH to another machine\nssh user@laptop1.vpn\n```\n\n## Troubleshooting\n\n### Check Wireguard Status\n```bash\nsudo wg show\n```\n\n### Verify IP Addresses\n```bash\nip addr show dev <instance-name>\n```\n\n### Check Routing\n```bash\nip -6 route show dev <instance-name>\n```\n\n### Interface Fails to Start: \"Address already in use\"\n\nIf you see this error in your logs:\n```\nwireguard: Could not bring up interface, ignoring: Address already in use\n```\n\nThis means the configured port (default: 51820) is already in use by another service or wireguard instance. Solutions:\n\n1. **Check for conflicting wireguard instances:**\n   ```bash\n   sudo wg show\n   sudo ss -ulnp | grep 51820\n   ```\n\n2. **Use a different port:**\n   ```nix\n   services.wireguard.myinstance = {\n     roles.controller = {\n       endpoint = \"vpn.example.com\";\n       port = 51821;  # Use a different port\n     };\n   };\n   ```\n\n3. **Ensure unique ports across multiple instances:**\n   If you have multiple wireguard instances on the same machine, each must use a different port.\n\n### Key Management\n\nKeys are automatically generated and stored in the clan vars system. To regenerate keys:\n\n```bash\n# Regenerate keys for a specific machine and instance\nclan vars generate --service wireguard-keys-<instance-name> --regenerate --machine <machine-name>\n\n# Apply the new keys\nclan machines update <machine-name>\n```\n\n## Security Considerations\n\n- All traffic is encrypted using Wireguard's modern cryptography\n- Private keys never leave the machines they're generated on\n- Public keys are distributed through the clan vars system\n- Controllers must have publicly accessible endpoints\n- Firewall rules are automatically configured for the Wireguard ports\n\n",
  "yggdrasil": "This module sets up [yggdrasil](https://yggdrasil-network.github.io/) across your clan. \n\nYggdrasil is designed to be a future-proof and decentralised alternative to\nthe structured routing protocols commonly used today on the internet. Inside your clan, it will allow you to reach all of your machines.\n\n## Example Usage\n\nWhile you can specify statically configured peers for each host, yggdrasil does auto-discovery of local peers.\n\n```nix\ninventory = {\n\n  machines = {\n    peer1 = { };\n    peer2 = { };\n  };\n\n  instances = {\n    yggdrasil = {\n\n      # Deploy on all machines\n      roles.default.tags.all = { };\n\n      # Or individual hosts\n      roles.default.machines.peer1 = { };\n      roles.default.machines.peer2 = { };\n    };\n  };\n};\n```\n",
  "zerotier": "## Usage\n\n```\ninventory.instances = {\n  zerotier = {\n    module = {\n      name = \"zerotier\";\n      input = \"clan-core\";\n    };\n    roles.peer.tags.all = { };\n    roles.controller.machines.jon = { };\n    roles.moon.machines.sara.settings.stableEndpoints = [ \"77.52.165.46\" ];\n  };\n```\n\nThe input should be named according to your flake input.\nAll machines will be peers and connected to the zerotier network.\nJon is the controller machine, which will will accept other machines into the network.\nSara is a moon and sets the `stableEndpoint` setting with a publicly reachable IP, the moon is optional.\n\n## Overview\n\nThis guide explains how to set up and manage a [ZeroTier VPN](https://zerotier.com) for a clan network. Each VPN requires a single controller and can support multiple peers and optional moons for better connectivity.\n\n## Roles\n\n### 1. Controller\n\nThe [Controller](https://docs.zerotier.com/controller/) manages network membership and is responsible for admitting new peers.\nWhen a new node is added to the clan, the controller must be updated to ensure it has the latest member list.\n\n- **Key Points:**\n  - Must be online to admit new machines to the VPN.\n  - Existing nodes can continue to communicate even when the controller is offline.\n\n### 2. Moons\n\n[Moons](https://docs.zerotier.com/roots) act as relay nodes,\nproviding direct connectivity to peers via their public IP addresses.\nThey enable devices that are not publicly reachable to join the VPN by routing through these nodes.\n\n- **Configuration Notes:**\n  - Each moon must define its public IP address.\n  - Ensures connectivity for devices behind NAT or restrictive firewalls.\n\n### 3. Peers\n\nPeers are standard nodes in the VPN.\nThey connect to other peers, moons, and the controller as needed.\n\n- **Purpose:**\n  - General role for all machines that are neither controllers nor moons.\n  - Ideal for most clan members devices.\n"
}
